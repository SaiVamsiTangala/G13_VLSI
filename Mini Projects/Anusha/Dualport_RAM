module Dualport_RAM_32x8(CLK_A,CLK_B,A_A,A_B,D_A,D_B,WEN_A,WEN_B,Q_A,Q_B);

parameter data_width = 8;
parameter address_width = 5;
parameter depth = 32;
parameter clk_period =10;
parameter wr_delay =5;
parameter rd_delay =5;

input CLK_A,CLK_B,WEN_A,WEN_B;
input [address_width-1 :0]A_A,A_B;
input [data_width-1 :0]D_A,D_B;
output reg [data_width-1:0]Q_AQ_B;

reg [data_width-1:0] mem[depth-1:0];

always @(posedge CLK_A)
begin
if(WEN_A)
mem[A_A] <= D_A;
else
Q_A <= mem[A_A];
end

always @(posedge CLK_B)
begin
if(WEN_B)
mem[A_B] <= D_B;
else
Q_B <= mem[A_B];
end
endmodule

module Dualport_RAM_32x8_tb;

parameter data_width = 8;
parameter address_width = 5;
parameter depth = 32;
parameter clk_period =10;
parameter wr_delay =5;
parameter rd_delay =5;

reg CLK_A,CLK_B,WEN_A,WEN_B;
reg [address_width-1 :0]A_A,A_B;
reg [data_width-1 :0]D_A,D_B;
wire [data_width-1:0]Q_AQ_B;
integer i;

module Dualport_RAM_32x8 DPR(CLK_A,CLK_B,A_A,A_B,D_A,D_B,WEN_A,WEN_B,Q_A,Q_B);

//initialization
task initialise();
begin
CLK_A =0;
CLK_B =0;
A_A =0;
A_B =0;
D_A =0;
D_B =0;
WEN_A=0;
WEN_B=0;
end

//clk generation
always #(clk_period/2) CLK_A = ~CLK_A;
always #(clk_period/2) CLK_B = ~CLK_B;


//write operation_A
task write_A();
begin
WEN_A =1;
for(i=0;i<=32;i=i+1)
begin
@(posedge CLK_A);
A_A <=i;
D_A <=$random%256;
//#(wr_delay);
end
end

//write operation_B
task write_B();
begin
WEN_B =1;
for(i=0;i<=32;i=i+1)
begin
@(posedge CLK_B);
A_B <=i;
D_B <=$random%256;
//#(wr_delay);
end
end

//read operation_A
task read_A();
begin
WEN_A =0;
for(i=0;i<=32;i=i+1)
begin
@(posedge CLK_A);
A_A <=i;
//#(rd_delay);
end

//read operation_B
task read_B();
begin
WEN_B =0;
for(i=0;i<=32;i=i+1)
begin
@(posedge CLK_B);
A_B <=i;
//#(rd_delay);
end

initial
begin
initialise();
fork
begin
write_A();
read_A();
end
begin
write_B();
read_B();
end
join
end
endmodule













































