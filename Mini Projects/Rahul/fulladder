module fulladder(A,B,Cin,S,Co);
      input A,B,Cin;
      output S , Co;
        assign S = A^B^Cin;
        assign Cout = (A&B)|(B&Cin)|(A&Cin);
 

 endmodule


module fulladder(A,B,Cin,S,Co);
       input A,B,Cin;
       output S , Co;
       always @(A,B,Cin)
 
 begin
	 casex({A,B,Cin})
		 3'b00x:begin
			 Sum=Cin;
			 Cout = 0;
		 end
		 3'b01x:begin
			 Sum=~Cin;
			 Cout=Cin;
		 end

			 
		 3'b10x:begin
			 Sum=~Cin;
			 Cout =Cin;
		 end
		 3'b11x:begin
			 Sum=Cin;
			 Cout=B;
		 end
		
      endcase
end
endmodule


module fulladder(A,B,Cin,S,Co);
         input A,B,Cin;
         output S, Co;
 always @(A,B,Cin)
 
 begin
	 if({A,B,Cin}==(3'b010||3'b001||3'b100))
	 begin
		 S=1;
		 Co = 0;
	
	end
	 else if({A,B,Cin}==(3'b011||3'b101||3'b110))
	
	begin
		 S = 0;
		 Co = 1;
	 
	 end
	 else if({A,B,Cin}==(3'b111))
	 
	 begin
		 S=1;
		 Co=1;
	 
	 end
	 else 
	 
	 begin
		 S = 0;
		 Co = 0;
	 end

end
 endmodule
