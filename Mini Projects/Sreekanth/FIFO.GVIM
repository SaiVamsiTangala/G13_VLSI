module fifo (
  input wire clk_write,    
  input wire clk_read,     
  input wire rst,          
  input wire wr_en,        
  input wire rd_en,        
  input wire [31:0] data_in,  
  output wire [31:0] data_out, 
  output wire empty,       
  output wire full         
);

  parameter DEPTH = 16;    // Depth of the FIFO

  reg [31:0] memory [0:DEPTH-1];
  reg [4:0] read_ptr, write_ptr;
  reg [4:0] count;

  always @(posedge clk_write or posedge rst) begin
    if (rst) begin
      write_ptr <= 5'b0;
    end else if (wr_en && ~full) begin
      memory[write_ptr] <= data_in;
      write_ptr <= write_ptr + 1;
    end
  end

  always @(posedge clk_read or posedge rst) begin
    if (rst) begin
      read_ptr <= 5'b0;
    end else if (rd_en && ~empty) begin
      data_out <= memory[read_ptr];
      read_ptr <= read_ptr + 1;
    end
  end

  always @(posedge clk_write or posedge rst) begin
    if (rst) begin
      count <= 0;
    end else if (wr_en && ~full && ~rd_en) begin
      count <= count + 1;
    end else if (rd_en && ~empty && ~wr_en) begin
      count <= count - 1;
    end
  end

  assign empty = (count == 0);
  assign full = (count == DEPTH);

endmodule
