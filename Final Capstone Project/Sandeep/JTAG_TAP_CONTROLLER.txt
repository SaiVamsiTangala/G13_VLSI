module JTAG_TAP_CONTROLLER (
    input  TMS,
    input  TCK,
    output reg SHIFT_DR_O,
    output reg PAUSE_DR_O,
    output reg UPDATE_DR_O,
    output reg CAPTURE_DR_O,
    output reg EXTEST_SELECT_O,
    output reg SAMPLE_PRELOAD_SELECT_O,
    output reg TDO
);


localparam TEST_LOGIC_RESET = 4'b0000;
localparam RUN_TEST_IDLE = 4'b0001;
localparam SELECT_DR_SCAN = 4'b0010;
localparam CAPTURE_DR = 4'b0011;
localparam SHIFT_DR = 4'b0100;
localparam EXIT1_DR = 4'b0101;
localparam PAUSE_DR = 4'b0110;
localparam EXIT2_DR = 4'b0111;
localparam UPDATE_DR = 4'b1000;
localparam SELECT_IR_SCAN = 4'b1001;
localparam CAPTURE_IR = 4'b1010;
localparam SHIFT_IR = 4'b1011;
localparam EXIT1_IR = 4'b1100;
localparam PAUSE_IR = 4'b1101;
localparam EXIT2_IR = 4'b1110;
localparam UPDATE_IR = 4'b1111;


reg [3:0] tap_state, next_state;
reg extest_select, sample_preload_select;


always_ff @(posedge TCK or posedge TMS) begin
    if (TMS) begin
        tap_state <= TEST_LOGIC_RESET;
    end else begin
        tap_state <= next_state;
    end
end


always_ff @(posedge TCK) begin
    case (tap_state)
        TEST_LOGIC_RESET: next_state = RUN_TEST_IDLE;
        RUN_TEST_IDLE: next_state = (TMS) ? TEST_LOGIC_RESET : SELECT_DR_SCAN;
        SELECT_DR_SCAN: next_state = (TMS) ? TEST_LOGIC_RESET : CAPTURE_DR;
        CAPTURE_DR: next_state = (TMS) ? EXIT1_DR : SHIFT_DR;
        SHIFT_DR: next_state = (TMS) ? EXIT1_DR : SHIFT_DR;
        EXIT1_DR: next_state = (TMS) ? TEST_LOGIC_RESET : PAUSE_DR;
        PAUSE_DR: next_state = (TMS) ? EXIT2_DR : PAUSE_DR;
        EXIT2_DR: next_state = (TMS) ? TEST_LOGIC_RESET : UPDATE_DR;
        UPDATE_DR: next_state = (TMS) ? TEST_LOGIC_RESET : RUN_TEST_IDLE;
        SELECT_IR_SCAN: next_state = (TMS) ? TEST_LOGIC_RESET : CAPTURE_IR;
        CAPTURE_IR: next_state = (TMS) ? EXIT1_IR : SHIFT_IR;
        SHIFT_IR: next_state = (TMS) ? EXIT1_IR : SHIFT_IR;
        EXIT1_IR: next_state = (TMS) ? TEST_LOGIC_RESET : PAUSE_IR;
        PAUSE_IR: next_state = (TMS) ? EXIT2_IR : PAUSE_IR;
        EXIT2_IR: next_state = (TMS) ? TEST_LOGIC_RESET : UPDATE_IR;
        UPDATE_IR: next_state = (TMS) ? TEST_LOGIC_RESET : RUN_TEST_IDLE;
        default: next_state = TEST_LOGIC_RESET;
    endcase
end

// Assign outputs based on the current state
always_comb begin
    SHIFT_DR_O = (tap_state == SHIFT_DR);
    PAUSE_DR_O = (tap_state == PAUSE_DR);
    UPDATE_DR_O = (tap_state == UPDATE_DR);
    CAPTURE_DR_O = (tap_state == CAPTURE_DR);
    EXTEST_SELECT_O = extest_select;
    SAMPLE_PRELOAD_SELECT_O = sample_preload_select;
    TDO = 1'b0; // Output TDO is set to 0 by default
end

endmodule
